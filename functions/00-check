#! /bin/bash
#set -eu

dir="$(dirname "$0")"
deps="${dir}/packages/deps.list"

midbranch="\0342\0224\0234\0342\0224\0200\0342\0224\0200"
endbranch="\0342\0224\0224\0342\0224\0200\0342\0224\0200"

# # Tricks vim-autointent into thinking the default indent is 1 space.
# heirarchy="Main
#  ${midbranch} Base
#  ${midbranch} Miscellaneous
#  ${midbranch} Desktop environment
#  ${midbranch} Network tools
#  ${midbranch} Applications
#  ${midbranch} Themes
#  ${endbranch} Personalization"

function check_fail {
  EXITSTATUS=${1:-}
  if [[ $EXITSTATUS -gt 0 ]]; then
    sleep 3s && main
  fi
}

srclist="/etc/apt/sources.list"
function check_debian_release {
  show_info "Checking currently set Debian release."
  if ! [[ "$(lsb_release)" == "stretch" ]]; then
    show_warning "Currently running $(lsb_relase -sc)"
    read -r -p $'\033[1;34m Switch to stretch? (y/N) \033[0m' response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      echo "Updating sources.list."
      sudo sed -i "/deb cdrom/d" ${srclist}
      sudo sed -i "/# *$/d" ${srclist}
      sudo sed -i "s/$(lsb_release -sc)/stretch/g" ${srclist}
      sudo sh -c "apt-get update && \
        sudo apt-get -y upgrade && \
        sudo apt-get -y dist-upgrade \
        sudo apt-get -y autoremove \
        sudo apt-get -y autoclean \
        sudo update-grub"
      show_info "Reboot your system after major updates."
    fi
  else
    show_success "Currently running $(lsb_relase -sc)"
  fi
}

function check_installed {
  for package in "${@}"; do
    # Check if package is installed already before installing.
    if dpkg -s ${package} > /dev/null 2>&1; then
      show_listitem "${package} package already installed. Skipping."
    else
      # First check if the package exists in the repos.
      if apt-cache show ${package} >/dev/null 2>&1; then
        show_listitem "Installing ${package}."
        sudo apt-get -y install ${package}
      else
        show_warning "Package ${package} does not exist in the repos. Skipping."
      fi
    fi
  done
}

function install_dependencies {
  show_header "Checking dependencies."
  for package in $(cat $deps); do
    if ! dpkg -s ${package} > /dev/null 2>&1; then
      show_info "${package} is needed for this script."
      sudo apt-get install ${package}
      check_fail
      show_success "${package} now installed."
    else
      show_success "${package} is already installed."
    fi
  done
}

function check_network {
  show_header "Checking network connection."
  
  if wget -q --tries=10 --timeout=20 --spider https://google.com >/dev/null; then
    show_success "Network is working."
  else
    show_error "Cannot start network connextion."
    exit 1
  fi
}
